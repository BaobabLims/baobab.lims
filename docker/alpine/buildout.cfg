# This buildout can be used to obtain a complete test system from scratch:
#
# Use it like this:
#
#    virtualenv .
#    ./bin/pip install zc.buildout
#    bin/buildout

[buildout]
index = https://pypi.python.org/simple/
extends = http://dist.plone.org/release/4.3.19/versions.cfg
extensions +=
    mr.developer

sources = sources
auto-checkout = *

versions = versions
develop =   
    bika.lims
    baobab.lims
    graphite.theme
    zc.recipe.cmmi

zeoserver-address = 8100
zeoclient-address = 9090

parts =
    instance
    robot
    i18ndude
    update_translations
    lxml
 

eggs =
    i18ndude
    lxml
    

[sources]
baobab.lims = git https://github.com/BaobabLims/baobab.lims.git
bika.lims = git https://github.com/BaobabLims/bika.lims.git
graphite.theme = git https://github.com/BaobabLims/graphite.theme.git

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080

# [libxml2]
# recipe = z3c.recipe.staticlxml
# url = https://www.cs.purdue.edu/bdbms/downloads/libxml2-2.6.26.tar.gz
# extra_options = --without-python

# [libxslt]
# recipe = zc.recipe.cmmi
# url = ftp://xmlsoft.org/libxml2/libxslt-1.1.17.tar.gz
# extra_options =  --with-libxml-prefix=${buildout:directory}/parts/libxml2/
#               --without-python

[lxml]
recipe = zc.recipe.egg:custom
eggs = lxml
include-dirs = ${buildout:directory}/parts/libxml2/include:${buildout:directory}/parts/libxslt/include
rpath = ${buildout:directory}/parts/libxml2/lib:${buildout:directory}/parts/libxslt/lib
libxml2-url = http://xmlsoft.org/sources/libxml2-2.7.7.tar.gz
libxslt-url = http://xmlsoft.org/sources/libxslt-1.1.26.tar.gz
# [lxml]
# recipe = z3c.recipe.staticlxml
# egg = lxml


[lxmlpython]
recipe = zc.recipe.egg
interpreter = lxmlpython
eggs = lxml

[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']

[robot]
recipe = zc.recipe.egg
eggs =
    ${buildout:eggs}
    plone.app.robotframework

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

[update_translations]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/update_translations
input = inline:
    #!/bin/sh
    #Generated by buildout from baobab.lims/buildout.cfg
    I18NDUDE=${buildout:directory}/bin/i18ndude
    EXCLUDE="bin build develop-eggs eggs include lib local parts"
    LOCALES=${buildout:directory}/baobab/lims/locales
    cd $LOCALES

    ### always pull all translations from transifex.
    tx pull -a -f

    ###### bika domain ######
    ### Flush the english (transifex source language) po files
    ### If we don't do this, new bika-manual.pot translations won't be synced.
    > en/LC_MESSAGES/bika.po
    ### Re-scan source for new strings
    $I18NDUDE rebuild-pot -p bika.pot -c bika --exclude "$EXCLUDE" ${buildout:directory}
    ### add manual translations (overrides)
    $I18NDUDE trmerge bika-tmp.pot bika-manual.pot > bika.pot
    mv bika-tmp.pot bika.pot
    ### sync
    $I18NDUDE sync --pot bika.pot */LC_MESSAGES/bika.po

    ###### plone domain ######
    ### Flush the english (transifex source language) po files
    ### If we don't do this, new bika-manual.pot translations won't be synced.
    > en/LC_MESSAGES/plone.po
    ### Re-scan source for new strings
    $I18NDUDE rebuild-pot --pot plone.pot --create plone ${buildout:directory}/baobab/lims/profiles
    ### filter out messages that are already translated
    #$I18NDUDE filter plone-tmp.pot ${buildout:directory}/parts/omelette/plone/app/locales/locales/plone.pot > plone-tmp.pot
    mv plone-tmp.pot plone.pot

    ### add manual translations (overrides)
    $I18NDUDE trmerge plone.pot plone-manual.pot > plone-tmp.pot
    mv plone-tmp.pot plone.pot

    ### sync
    $I18NDUDE sync --pot plone.pot */LC_MESSAGES/plone.po

    find . -name "*.mo" -delete
    for po in `find . -name "*.po"`; do
        ###
        msgfmt -o `dirname $po`/`basename $po .po`.mo $po;
    done

    ### Transifex
    eho run \"tx push -s -t\" if everything went smoothly.
mode = 755

[versions]
setuptools => 36.3.0
zc.buildout => 2.9.4
